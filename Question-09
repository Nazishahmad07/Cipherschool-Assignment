#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class SquareRootDecomposition {
private:
    vector<int> arr, block;
    int blockSize, n;

public:
    SquareRootDecomposition(vector<int>& input) {
        n = input.size();
        blockSize = sqrt(n);
        arr = input;
        block.resize((n + blockSize - 1) / blockSize, 0);

        for (int i = 0; i < n; i++) {
            block[i / blockSize] += arr[i];
        }
    }

    void update(int index, int value) {
        int blockIndex = index / blockSize;
        block[blockIndex] += (value - arr[index]);
        arr[index] = value;
    }

    int query(int L, int R) {
        int sum = 0;
        int startBlock = L / blockSize;
        int endBlock = R / blockSize;

        if (startBlock == endBlock) {
            for (int i = L; i <= R; i++) {
                sum += arr[i];
            }
        } else {
            for (int i = L; i < (startBlock + 1) * blockSize; i++) {
                sum += arr[i];
            }
            for (int i = startBlock + 1; i < endBlock; i++) {
                sum += block[i];
            }
            for (int i = endBlock * blockSize; i <= R; i++) {
                sum += arr[i];
            }
        }
        return sum;
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    SquareRootDecomposition srd(arr);
    
    while (q--) {
        string type;
        cin >> type;
        if (type == "UPDATE") {
            int index, value;
            cin >> index >> value;
            srd.update(index - 1, value);
        } else if (type == "QUERY") {
            int L, R;
            cin >> L >> R;
            cout << srd.query(L - 1, R - 1) << endl;
        }
    }
    
    return 0;
}
